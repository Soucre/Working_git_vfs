//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18213
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18213.
// 
#pragma warning disable 1591

namespace VfsCustomerService.Business.MTSpam {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18213")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MTSenderSoap", Namespace="http://tempuri.org/")]
    public partial class MTSender : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback doSendMTOperationCompleted;
        
        private System.Threading.SendOrPostCallback doSendMTSPAMOperationCompleted;
        
        private System.Threading.SendOrPostCallback doSendMTVSBOperationCompleted;
        
        private System.Threading.SendOrPostCallback doSendMTSPAMVSBOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MTSender() {
            this.Url = global::VfsCustomerService.Business.Properties.Settings.Default.VfsCustomerService_Business_MTSpam_MTSender;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event doSendMTCompletedEventHandler doSendMTCompleted;
        
        /// <remarks/>
        public event doSendMTSPAMCompletedEventHandler doSendMTSPAMCompleted;
        
        /// <remarks/>
        public event doSendMTVSBCompletedEventHandler doSendMTVSBCompleted;
        
        /// <remarks/>
        public event doSendMTSPAMVSBCompletedEventHandler doSendMTSPAMVSBCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/doSendMT", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int doSendMT(string UserID, string Message, string ServiceID, string CommandCode, string MessageType, string RequestID, string TotalMessage, string MessageIndex, string IsMore, string ContentType, long MoID, string Username, string Password) {
            object[] results = this.Invoke("doSendMT", new object[] {
                        UserID,
                        Message,
                        ServiceID,
                        CommandCode,
                        MessageType,
                        RequestID,
                        TotalMessage,
                        MessageIndex,
                        IsMore,
                        ContentType,
                        MoID,
                        Username,
                        Password});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void doSendMTAsync(string UserID, string Message, string ServiceID, string CommandCode, string MessageType, string RequestID, string TotalMessage, string MessageIndex, string IsMore, string ContentType, long MoID, string Username, string Password) {
            this.doSendMTAsync(UserID, Message, ServiceID, CommandCode, MessageType, RequestID, TotalMessage, MessageIndex, IsMore, ContentType, MoID, Username, Password, null);
        }
        
        /// <remarks/>
        public void doSendMTAsync(string UserID, string Message, string ServiceID, string CommandCode, string MessageType, string RequestID, string TotalMessage, string MessageIndex, string IsMore, string ContentType, long MoID, string Username, string Password, object userState) {
            if ((this.doSendMTOperationCompleted == null)) {
                this.doSendMTOperationCompleted = new System.Threading.SendOrPostCallback(this.OndoSendMTOperationCompleted);
            }
            this.InvokeAsync("doSendMT", new object[] {
                        UserID,
                        Message,
                        ServiceID,
                        CommandCode,
                        MessageType,
                        RequestID,
                        TotalMessage,
                        MessageIndex,
                        IsMore,
                        ContentType,
                        MoID,
                        Username,
                        Password}, this.doSendMTOperationCompleted, userState);
        }
        
        private void OndoSendMTOperationCompleted(object arg) {
            if ((this.doSendMTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.doSendMTCompleted(this, new doSendMTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/doSendMTSPAM", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int doSendMTSPAM(string UserID, string Message, string Username, string Password) {
            object[] results = this.Invoke("doSendMTSPAM", new object[] {
                        UserID,
                        Message,
                        Username,
                        Password});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void doSendMTSPAMAsync(string UserID, string Message, string Username, string Password) {
            this.doSendMTSPAMAsync(UserID, Message, Username, Password, null);
        }
        
        /// <remarks/>
        public void doSendMTSPAMAsync(string UserID, string Message, string Username, string Password, object userState) {
            if ((this.doSendMTSPAMOperationCompleted == null)) {
                this.doSendMTSPAMOperationCompleted = new System.Threading.SendOrPostCallback(this.OndoSendMTSPAMOperationCompleted);
            }
            this.InvokeAsync("doSendMTSPAM", new object[] {
                        UserID,
                        Message,
                        Username,
                        Password}, this.doSendMTSPAMOperationCompleted, userState);
        }
        
        private void OndoSendMTSPAMOperationCompleted(object arg) {
            if ((this.doSendMTSPAMCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.doSendMTSPAMCompleted(this, new doSendMTSPAMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/doSendMTVSB", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int doSendMTVSB(string MessageXML) {
            object[] results = this.Invoke("doSendMTVSB", new object[] {
                        MessageXML});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void doSendMTVSBAsync(string MessageXML) {
            this.doSendMTVSBAsync(MessageXML, null);
        }
        
        /// <remarks/>
        public void doSendMTVSBAsync(string MessageXML, object userState) {
            if ((this.doSendMTVSBOperationCompleted == null)) {
                this.doSendMTVSBOperationCompleted = new System.Threading.SendOrPostCallback(this.OndoSendMTVSBOperationCompleted);
            }
            this.InvokeAsync("doSendMTVSB", new object[] {
                        MessageXML}, this.doSendMTVSBOperationCompleted, userState);
        }
        
        private void OndoSendMTVSBOperationCompleted(object arg) {
            if ((this.doSendMTVSBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.doSendMTVSBCompleted(this, new doSendMTVSBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/doSendMTSPAMVSB", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int doSendMTSPAMVSB(string MessageXML) {
            object[] results = this.Invoke("doSendMTSPAMVSB", new object[] {
                        MessageXML});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void doSendMTSPAMVSBAsync(string MessageXML) {
            this.doSendMTSPAMVSBAsync(MessageXML, null);
        }
        
        /// <remarks/>
        public void doSendMTSPAMVSBAsync(string MessageXML, object userState) {
            if ((this.doSendMTSPAMVSBOperationCompleted == null)) {
                this.doSendMTSPAMVSBOperationCompleted = new System.Threading.SendOrPostCallback(this.OndoSendMTSPAMVSBOperationCompleted);
            }
            this.InvokeAsync("doSendMTSPAMVSB", new object[] {
                        MessageXML}, this.doSendMTSPAMVSBOperationCompleted, userState);
        }
        
        private void OndoSendMTSPAMVSBOperationCompleted(object arg) {
            if ((this.doSendMTSPAMVSBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.doSendMTSPAMVSBCompleted(this, new doSendMTSPAMVSBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18213")]
    public delegate void doSendMTCompletedEventHandler(object sender, doSendMTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18213")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class doSendMTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal doSendMTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18213")]
    public delegate void doSendMTSPAMCompletedEventHandler(object sender, doSendMTSPAMCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18213")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class doSendMTSPAMCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal doSendMTSPAMCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18213")]
    public delegate void doSendMTVSBCompletedEventHandler(object sender, doSendMTVSBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18213")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class doSendMTVSBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal doSendMTVSBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18213")]
    public delegate void doSendMTSPAMVSBCompletedEventHandler(object sender, doSendMTSPAMVSBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18213")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class doSendMTSPAMVSBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal doSendMTSPAMVSBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591